# k8s-dashboard-deployment.yaml

# --- 1. ServiceAccount ---
# 이 대시보드 파드가 쿠버네티스 API에 접근할 때 사용할 신분(ID)입니다.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-dashboard-sa
  namespace: default

---
# --- 2. ClusterRole ---
# ServiceAccount가 어떤 행동을 할 수 있는지 정의하는 '권한 목록'입니다.
# 여기서는 노드와 파드를 '보고(get)' '목록을 가져오는(list)' 권한만 부여합니다.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-dashboard-clusterrole
rules:
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
# --- 3. ClusterRoleBinding ---
# 위에서 만든 '권한 목록'(ClusterRole)을 '신분'(ServiceAccount)에 연결해주는 역할입니다.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-dashboard-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: k8s-dashboard-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: k8s-dashboard-clusterrole
  apiGroup: rbac.authorization.k8s.io

---
# --- 4. Deployment ---
# 실제 애플리케이션 파드를 어떻게 생성하고 관리할지 정의합니다.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-dashboard-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-dashboard
  template:
    metadata:
      labels:
        app: k8s-dashboard
    spec:
      # 위에서 만든 ServiceAccount를 이 파드에 지정합니다.
      serviceAccountName: k8s-dashboard-sa
      containers:
      - name: k8s-dashboard-container
        # 중요: 이 이미지는 직접 빌드하여 Docker Hub나 GCR 같은 레지스트리에 푸시해야 합니다.
        # 예: your-registry/k8s-dashboard:latest
        image: k8s-dashboard:latest
        # 만약 로컬 테스트용이라면 imagePullPolicy를 Never로 설정해야 합니다.
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: RUST_LOG
          value: "info"
        # 컨테이너가 정상적으로 실행 중인지 확인하기 위한 설정입니다.
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10

---
# --- 5. Service ---
# 위에서 만든 Deployment(파드)를 외부에서 접속할 수 있도록 노출시키는 역할입니다.
apiVersion: v1
kind: Service
metadata:
  name: k8s-dashboard-service
  namespace: default
spec:
  # NodePort: 클러스터의 모든 노드에서 특정 포트로 접속할 수 있게 합니다.
  # LoadBalancer: 클라우드 환경이라면 외부 IP를 할당받는 LoadBalancer 타입이 더 편리할 수 있습니다.
  type: NodePort
  selector:
    app: k8s-dashboard
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
    # nodePort: 30080  # 이 포트를 통해 외부에서 접속합니다. (예: http://<Node_IP>:30080)

